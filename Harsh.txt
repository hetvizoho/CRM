<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Onboarding Widget</title>
    <link rel="stylesheet" href="widget.css">
    <!-- Keep all existing CSS styles -->
</head>

<body>
    <div class="widget-container">
        <div class="widget-header">
            <h1>Client Onboarding Portal</h1>
            <p>Complete your investment account opening process step by step</p>
        </div>

        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" id="progressFill"></div>
            </div>
            <div class="step-indicators" id="stepIndicators">
                <div class="step-indicator active" data-step="1"><span>First Holder</span></div>
                <div class="step-indicator" data-step="2"><span>Second Holder</span></div>
                <div class="step-indicator" data-step="3"><span>Third Holder</span></div>
                <div class="step-indicator" data-step="4"><span>Investment</span></div>
            </div>
        </div>

        <div class="form-container">
            <div id="loadingScreen" class="loading hidden">
                <div class="spinner"></div>
                <p>Loading your data...</p>
            </div>

            <div id="statusContainer" class="hidden">
                <div id="statusBadge" class="status-badge"></div>
            </div>

            <form id="onboardingForm">
                <input type="hidden" id="recordId" name="recordId">
                <input type="hidden" id="recordStatus" name="recordStatus" value="draft">

                <!-- Step 1: First Holder (includes basic account fields moved here) -->
                <div class="form-step active" data-step="1">
                    <h2 class="step-title">First/Sole Holder</h2>

                    <!-- Account / basic fields (moved into First Holder as requested) -->
                    <div class="section-group">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="nameOfApplicant" class="required-field">Name of Applicant</label>
                                <input type="text" id="nameOfApplicant" name="nameOfApplicant" required>
                            </div>
                            <!-- COMMENTED OUT OWNER FIELD AT LINES 1460-1463
                            <div class="form-group">
                                <label for="onboardingOwner" class="required-field">Onboarding Owner</label>
                                <input type="text" id="onboardingOwner" name="onboardingOwner" required>
                            </div>
                            -->
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="email" class="required-field">Email</label>
                                <input type="email" id="email" name="email" required>
                            </div>
                            <div class="form-group">
                                <label for="secondaryEmail">Secondary Email</label>
                                <input type="email" id="secondaryEmail" name="secondaryEmail">
                            </div>
                        </div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="exchangeRate">Exchange Rate</label>
                                <input type="number" id="exchangeRate" name="exchangeRate" step="0.01">
                            </div>
                            <div class="form-group">
                                <label for="currency">Currency</label>
                                <select id="currency" name="currency">
                                    <option value="INR">INR</option>
                                    <option value="SGD">SGD</option>
                                    <option value="USD">USD</option>
                                    <option value="AED">AED</option>
                                    <option value="GBP">GBP</option>
                                    <option value="EUR">EUR</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="emailOptOut">Email Opt Out</label>
                                <select id="emailOptOut" name="emailOptOut">
                                    <option value="No">No</option>
                                    <option value="Yes">Yes</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="investorDistributorType">Investor/Distributor Type</label>
                                <select id="investorDistributorType" name="investorDistributorType">
                                    <option value="-None-">-None-</option>
                                    <option value="Investor">Investor</option>
                                    <option value="Distributor">Distributor</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="salesType">Sales Type</label>
                                <select id="salesType" name="salesType">
                                    <option value="-None-">-None-</option>
                                    <option value="Direct">Direct</option>
                                    <option value="Channel">Channel</option>
                                    <option value="Offshore">Offshore</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Lookups & Onboarding Status moved into First Holder -->
                    <div class="section-group">
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="leadLookup">Lead Lookup</label>
                                <input type="text" id="leadLookup" name="leadLookup">
                            </div>
                            <div class="form-group">
                                <label for="familyLookup">Family Lookup</label>
                                <input type="text" id="familyLookup" name="familyLookup">
                            </div>
                            <div class="form-group">
                                <label for="investorLookup">Investor Lookup</label>
                                <input type="text" id="investorLookup" name="investorLookup">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="onboardingStatus">Onboarding Status</label>
                                <select id="onboardingStatus" name="onboardingStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="None">None</option>
                                    <option value="Detailed Documentation">Detailed Documentation</option>
                                    <option value="KYC Verifying">KYC Verifying</option>
                                    <option value="AML Verifyingg">AML Verifyingg</option>
                                    <option value="Custody Verifying">Custody Verifying</option>
                                    <option value="Checker Verifyingg">Checker Verifyingg</option>
                                    <option value="Penny Pay Verifyingg">Penny Pay Verifyingg</option>
                                    <option value="Demat Verifyingg">Demat Verifyingg</option>
                                    <option value="Account Activated">Account Activated</option>
                                    <option value="Document Scannedd">Document Scannedd</option>
                                    <option value="Welcome Kit Sharedd">Welcome Kit Sharedd</option>
                                    <option value="Onbaording Completed">Onbaording Completed</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="opportunity">Opportunity</label>
                                <input type="text" id="opportunity" name="opportunity">
                            </div>
                        </div>
                    </div>

                    <!-- Identity Details (existing FH fields) -->
                    <div class="section-group">
                        <div class="section-title">Section 1 - Identity Details - First/Sole Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_fatherSpouseName">Father's/Spouse's Name</label>
                                <input type="text" id="fh_fatherSpouseName" name="fh_fatherSpouseName">
                            </div>
                            <div class="form-group">
                                <label for="fh_motherName">Mother's Name</label>
                                <input type="text" id="fh_motherName" name="fh_motherName">
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="fh_dateOfBirth" class="required-field">Date of Birth</label>
                                <input type="date" id="fh_dateOfBirth" name="fh_dateOfBirth" required>
                            </div>
                            <div class="form-group">
                                <label for="fh_maritalStatus">Marital Status</label>
                                <select id="fh_maritalStatus" name="fh_maritalStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Single">Single</option>
                                    <option value="Married">Married</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="fh_gender" class="required-field">Gender</label>
                                <select id="fh_gender" name="fh_gender" required>
                                    <option value="-None-">-None-</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Transgender">Transgender</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_citizenship">Citizenship</label>
                                <select id="fh_citizenship" name="fh_citizenship">
                                    <option value="Indian">Indian</option>
                                    <option value="NRI">NRI</option>
                                    <option value="PIO">PIO</option>
                                    <option value="Foreign">Foreign</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="fh_typeOfAccount">Type of Account</label>
                                <select id="fh_typeOfAccount" name="fh_typeOfAccount">
                                    <option value="-None-">-None-</option>
                                    <option value="Resident">Resident</option>
                                    <option value="NRO">NRO</option>
                                    <option value="NRE">NRE</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_residentialStatus">Residential Status</label>
                                <select id="fh_residentialStatus" name="fh_residentialStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Resident Individual">Resident Individual</option>
                                    <option value="Non-Resident Individual">Non-Resident Individual</option>
                                    <option value="Foreign National">Foreign National</option>
                                    <option value="Person of Indian Origin">Person of Indian Origin</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="fh_pan" class="required-field">PAN</label>
                                <input type="text" id="fh_pan" name="fh_pan" pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}"
                                    placeholder="ABCDE1234F" required>
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="fh_gstNo">GST No</label>
                                <input type="text" id="fh_gstNo" name="fh_gstNo">
                            </div>
                            <div class="form-group">
                                <label for="fh_uidAadhaar">UID / Aadhaar No</label>
                                <input type="text" id="fh_uidAadhaar" name="fh_uidAadhaar" pattern="[0-9]{12}"
                                    placeholder="123456789012">
                            </div>
                            <div class="form-group">
                                <label for="fh_ckyc">CKYC No</label>
                                <input type="text" id="fh_ckyc" name="fh_ckyc">
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="fh_tan">TAN</label>
                            <input type="text" id="fh_tan" name="fh_tan">
                        </div>
                    </div>

                    <!-- Income Details -->
                    <div class="section-group">
                        <div class="section-title">Section 2 - Income Details - First/Sole Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_netWorth">Net Worth (Not older than 1 year)</label>
                                <input type="number" id="fh_netWorth" name="fh_netWorth" step="0.01">
                            </div>
                            <div class="form-group">
                                <label for="fh_asOnDate">As on Date</label>
                                <input type="date" id="fh_asOnDate" name="fh_asOnDate">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_incomeRange">Income Range (per annum)</label>
                                <select id="fh_incomeRange" name="fh_incomeRange">
                                    <option value="-None-">-None-</option>
                                    <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                    <option value="Rs. 1 Lakh to Rs. 5 Lakhs">Rs. 1 Lakh to Rs. 5 Lakhs</option>
                                    <option value="Rs. 5 Lakhs to Rs. 10 Lakhs">Rs. 5 Lakhs to Rs. 10 Lakhs</option>
                                    <option value="Rs. 10 Lakhs to 25 Lakhs">Rs. 10 Lakhs to 25 Lakhs</option>
                                    <option value=">Rs. 25 Lakhs">&gt;Rs. 25 Lakhs</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="fh_occupation">Occupation</label>
                                <select id="fh_occupation" name="fh_occupation">
                                    <option value="-None-">-None-</option>
                                    <option value="Private Sector">Private Sector</option>
                                    <option value="Public Sector">Public Sector</option>
                                    <option value="Govt. Services">Govt. Services</option>
                                    <option value="Business">Business</option>
                                    <option value="Professional">Professional</option>
                                    <option value="Housewife">Housewife</option>
                                    <option value="Retired">Retired</option>
                                    <option value="Student">Student</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_pleaseSelectStatus">Please select Status</label>
                                <select id="fh_pleaseSelectStatus" name="fh_pleaseSelectStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Politically Exposed Person (PEP)">Politically Exposed Person (PEP)
                                    </option>
                                    <option value="Related to Politically Exposed Person (RPEP)">Related to Politically
                                        Exposed Person (RPEP)</option>
                                    <option value="Not Applicable">Not Applicable</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="fh_sourcesOfFunds">Sources of Funds</label>
                                <select id="fh_sourcesOfFunds" name="fh_sourcesOfFunds">
                                    <option value="-None-">-None-</option>
                                    <option value="Own & Family">Own & Family</option>
                                    <option value="Borrowed">Borrowed</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_natureOfBusinessProfession">Nature of Business/Profession</label>
                                <input type="text" id="fh_natureOfBusinessProfession"
                                    name="fh_natureOfBusinessProfession">
                            </div>
                            <div class="form-group">
                                <label for="fh_overallInvestmentGoals">Overall Investment Goals</label>
                                <select id="fh_overallInvestmentGoals" name="fh_overallInvestmentGoals">
                                    <option value="-None-">-None-</option>
                                    <option value="Capital Appreciation & Regular Income">Capital Appreciation & Regular
                                        Income</option>
                                    <option value="Regular Income">Regular Income</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="fh_typeOfCompanyFirm">Type of Company/Firm</label>
                            <select id="fh_typeOfCompanyFirm" name="fh_typeOfCompanyFirm">
                                <option value="Proprietorship">Proprietorship</option>
                                <option value="Partnership">Partnership</option>
                                <option value="Private Limited">Private Limited</option>
                                <option value="Public Limited">Public Limited</option>
                                <option value="LLP">LLP</option>
                                <option value="Trust">Trust</option>
                                <option value="Society">Society</option>
                                <option value="HUF">HUF</option>
                                <option value="Others">Others</option>
                            </select>
                        </div>
                    </div>

                    <!-- Contact Details -->
                    <div class="section-group">
                        <div class="section-title">Section 3 - Contact Details - First/Sole Holder</div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="fh_mobileNo" class="required-field">Mobile No.</label>
                                <input type="tel" id="fh_mobileNo" name="fh_mobileNo" pattern="[0-9]{10}"
                                    placeholder="9876543210" required>
                            </div>
                            <div class="form-group">
                                <label for="fh_landlineNo">Landline No.</label>
                                <input type="tel" id="fh_landlineNo" name="fh_landlineNo">
                            </div>
                            <div class="form-group">
                                <label for="fh_emailId" class="required-field">Email ID</label>
                                <input type="email" id="fh_emailId" name="fh_emailId" required>
                            </div>
                        </div>
                    </div>

                    <!-- Proof of Identity -->
                    <div class="section-group">
                        <div class="section-title">Section 4 - Proof of Identity - First/Sole Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_passportNumber">A - Passport Number</label>
                                <input type="text" id="fh_passportNumber" name="fh_passportNumber">
                            </div>
                            <div class="form-group">
                                <label for="fh_passportExpiryDate">Passport Expiry Date</label>
                                <input type="date" id="fh_passportExpiryDate" name="fh_passportExpiryDate">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_panCard">PAN Card</label>
                                <input type="text" id="fh_panCard" name="fh_panCard">
                            </div>
                            <div class="form-group">
                                <label for="fh_voterID">B - Voter ID</label>
                                <input type="text" id="fh_voterID" name="fh_voterID">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_uidAadhaarProof">D - UID (Aadhaar)</label>
                                <input type="text" id="fh_uidAadhaarProof" name="fh_uidAadhaarProof">
                            </div>
                            <div class="form-group">
                                <label for="fh_drivingLicense">E - Driving License</label>
                                <input type="text" id="fh_drivingLicense" name="fh_drivingLicense">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="fh_drivingLicenseExpiryDate">Driving License Expiry Date</label>
                                <input type="date" id="fh_drivingLicenseExpiryDate" name="fh_drivingLicenseExpiryDate">
                            </div>
                            <div class="form-group">
                                <label for="preferredAssetClassOther">Preferred Asset Class - Other</label>
                                <input type="text" id="preferredAssetClassOther" name="preferredAssetClassOther">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 2: Second Holder -->
                <div class="form-step" data-step="2">
                    <h2 class="step-title">Second Holder Details</h2>

                    <div class="alert alert-info">
                        <strong>Note:</strong> Fill this section only if you have a second holder for the account.
                    </div>

                    <!-- Identity Details - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Identity Details - Second Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_nameOfApplicant">Name of Applicant</label>
                                <input type="text" id="sh_nameOfApplicant" name="sh_nameOfApplicant">
                            </div>
                            <div class="form-group">
                                <label for="sh_fatherSpouseName">Father's/Spouse's Name</label>
                                <input type="text" id="sh_fatherSpouseName" name="sh_fatherSpouseName">
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="sh_dateOfBirth">Date of Birth</label>
                                <input type="date" id="sh_dateOfBirth" name="sh_dateOfBirth">
                            </div>
                            <div class="form-group">
                                <label for="sh_maritalStatus">Marital Status</label>
                                <select id="sh_maritalStatus" name="sh_maritalStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Single">Single</option>
                                    <option value="Married">Married</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_gender">Gender</label>
                                <select id="sh_gender" name="sh_gender">
                                    <option value="-None-">-None-</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_citizenship">Citizenship</label>
                                <select id="sh_citizenship" name="sh_citizenship">
                                    <option value="-None-">-None-</option>
                                    <option value="Indian">Indian</option>
                                    <option value="NRI">NRI</option>
                                    <option value="PIO">PIO</option>
                                    <option value="Foreign">Foreign</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_pan">PAN</label>
                                <input type="text" id="sh_pan" name="sh_pan" pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}">
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="sh_gstNo">GST No</label>
                                <input type="text" id="sh_gstNo" name="sh_gstNo">
                            </div>
                            <div class="form-group">
                                <label for="sh_uidAadhaar">UID / Aadhaar No</label>
                                <input type="text" id="sh_uidAadhaar" name="sh_uidAadhaar" pattern="[0-9]{12}">
                            </div>
                            <div class="form-group">
                                <label for="sh_ckycNo">CKYC No</label>
                                <input type="text" id="sh_ckycNo" name="sh_ckycNo">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_tan">TAN</label>
                                <input type="text" id="sh_tan" name="sh_tan">
                            </div>
                            <div class="form-group">
                                <label for="sh_accountType">Account Type</label>
                                <select id="sh_accountType" name="sh_accountType">
                                    <option value="-None-">-None-</option>
                                    <option value="Saving">Saving</option>
                                    <option value="Current">Current</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Income Details - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Income Details - Second Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_netWorth">Net Worth (Not older than 1 year)</label>
                                <input type="number" id="sh_netWorth" name="sh_netWorth" step="0.01">
                            </div>
                            <div class="form-group">
                                <label for="sh_asOnDate">As on Date</label>
                                <input type="date" id="sh_asOnDate" name="sh_asOnDate">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_incomeRange">Income Range (per annum)</label>
                                <select id="sh_incomeRange" name="sh_incomeRange">
                                    <option value="-None-">-None-</option>
                                    <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                    <option value="Rs.1-5 Lakhs">Rs.1-5 Lakhs</option>
                                    <option value="Rs.5-10 Lakhs">Rs.5-10 Lakhs</option>
                                    <option value="Rs.10-25 Lakhs">Rs.10-25 Lakhs</option>
                                    <option value=">25 Lakhs">&gt;25 Lakhs</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_occupation">Occupation</label>
                                <select id="sh_occupation" name="sh_occupation">
                                    <option value="-None-">-None-</option>
                                    <option value="Private Sector">Private Sector</option>
                                    <option value="Public Sector">Public Sector</option>
                                    <option value="Govt. Services">Govt. Services</option>
                                    <option value="Business">Business</option>
                                    <option value="Professional">Professional</option>
                                    <option value="Housewife">Housewife</option>
                                    <option value="Retired">Retired</option>
                                    <option value="Student">Student</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_pleaseSelectStatus">Please select Status</label>
                                <select id="sh_pleaseSelectStatus" name="sh_pleaseSelectStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Politically Exposed Person (PEP)">Politically Exposed Person (PEP)</option>
                                    <option value="Related to Politically Exposed Person (RPEP)">Related to Politically Exposed Person (RPEP)</option>
                                    <option value="Not Applicable">Not Applicable</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_sourcesOfFunds">Sources of Funds</label>
                                <select id="sh_sourcesOfFunds" name="sh_sourcesOfFunds">
                                    <option value="-None-">-None-</option>
                                    <option value="Own & Family">Own & Family</option>
                                    <option value="Borrowed">Borrowed</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Details - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Contact Details - Second Holder</div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="sh_mobileNo">Mobile No.</label>
                                <input type="tel" id="sh_mobileNo" name="sh_mobileNo" pattern="[0-9]{10}">
                            </div>
                            <div class="form-group">
                                <label for="sh_landlineNo">Landline No.</label>
                                <input type="tel" id="sh_landlineNo" name="sh_landlineNo">
                            </div>
                            <div class="form-group">
                                <label for="sh_emailId">Email ID</label>
                                <input type="email" id="sh_emailId" name="sh_emailId">
                            </div>
                        </div>
                    </div>

                    <!-- Proof / Address - Second Holder -->
                    <div class="section-group">
                        <div class="section-title">Proof & Address - Second Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_proofOfAddress">Proof of Address</label>
                                <select id="sh_proofOfAddress" name="sh_proofOfAddress">
                                    <option value="-None-">-None-</option>
                                    <option value="Passport">Passport</option>
                                    <option value="Driving Licence">Driving Licence</option>
                                    <option value="UID (Aadhaar)">UID (Aadhaar)</option>
                                    <option value="Voter ID Card">Voter ID Card</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_addressType">Address Type</label>
                                <select id="sh_addressType" name="sh_addressType">
                                    <option value="-None-">-None-</option>
                                    <option value="Residential / Business">Residential / Business</option>
                                    <option value="Residential">Residential</option>
                                    <option value="Business">Business</option>
                                    <option value="Registered Office">Registered Office</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="sh_permanentAddress">Permanent address</label>
                                <select id="sh_permanentAddress" name="sh_permanentAddress">
                                    <option value="-None-">-None-</option>
                                    <option value="Same as Correspondence Address">Same as Correspondence Address</option>
                                    <option value="Overseas Address (for NRI)">Overseas Address (for NRI)</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="sh_taxResidencyOutsideIndia">Tax Residency (outside India)</label>
                                <select id="sh_taxResidencyOutsideIndia" name="sh_taxResidencyOutsideIndia">
                                    <option value="-None-">-None-</option>
                                    <option value="Yes">Yes</option>
                                    <option value="No">No</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 3: Third Holder -->
                <div class="form-step" data-step="3">
                    <h2 class="step-title">Third Holder Details</h2>

                    <div class="alert alert-info">
                        <strong>Note:</strong> Fill this section only if you have a third holder for the account.
                    </div>

                    <!-- Identity Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Identity Details - Third Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="th_nameOfApplicant">Name of Applicant</label>
                                <input type="text" id="th_nameOfApplicant" name="th_nameOfApplicant">
                            </div>
                            <div class="form-group">
                                <label for="th_fatherSpouseName">Father's/Spouse's Name</label>
                                <input type="text" id="th_fatherSpouseName" name="th_fatherSpouseName">
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="th_dateOfBirth">Date of Birth</label>
                                <input type="date" id="th_dateOfBirth" name="th_dateOfBirth">
                            </div>
                            <div class="form-group">
                                <label for="th_maritalStatus">Marital Status</label>
                                <select id="th_maritalStatus" name="th_maritalStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Single">Single</option>
                                    <option value="Married">Married</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="th_gender">Gender</label>
                                <select id="th_gender" name="th_gender">
                                    <option value="-None-">-None-</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Transgender">Transgender</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="th_citizenship">Citizenship</label>
                                <select id="th_citizenship" name="th_citizenship">
                                    <option value="-None-">-None-</option>
                                    <option value="Indian">Indian</option>
                                    <option value="NRI">NRI</option>
                                    <option value="PIO">PIO</option>
                                    <option value="Foreign">Foreign</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="th_pan">PAN</label>
                                <input type="text" id="th_pan" name="th_pan" pattern="[A-Z]{5}[0-9]{4}[A-Z]{1}">
                            </div>
                        </div>

                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="th_gstNo">GST No</label>
                                <input type="text" id="th_gstNo" name="th_gstNo">
                            </div>
                            <div class="form-group">
                                <label for="th_uidAadhaar">UID / Aadhaar No</label>
                                <input type="text" id="th_uidAadhaar" name="th_uidAadhaar" pattern="[0-9]{12}">
                            </div>
                            <div class="form-group">
                                <label for="th_ckycNo">CKYC No</label>
                                <input type="text" id="th_ckycNo" name="th_ckycNo">
                            </div>
                        </div>
                    </div>

                    <!-- Income Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Income Details - Third Holder</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="th_netWorth">Net Worth (Not older than 1 year)</label>
                                <input type="number" id="th_netWorth" name="th_netWorth" step="0.01">
                            </div>
                            <div class="form-group">
                                <label for="th_asOnDate">As on Date</label>
                                <input type="date" id="th_asOnDate" name="th_asOnDate">
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="th_incomeRange">Income Range (per annum)</label>
                                <select id="th_incomeRange" name="th_incomeRange">
                                    <option value="-None-">-None-</option>
                                    <option value="Below Rs.1 Lakh">Below Rs.1 Lakh</option>
                                    <option value="Rs.1-5 Lakhs">Rs.1-5 Lakhs</option>
                                    <option value="Rs.5-10 Lakhs">Rs.5-10 Lakhs</option>
                                    <option value="Rs.10-25 Lakhs">Rs.10-25 Lakhs</option>
                                    <option value=">25 Lakhs">&gt;25 Lakhs</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="th_occupation">Occupation</label>
                                <select id="th_occupation" name="th_occupation">
                                    <option value="-None-">-None-</option>
                                    <option value="Private Sector">Private Sector</option>
                                    <option value="Public Sector">Public Sector</option>
                                    <option value="Govt. Services">Govt. Services</option>
                                    <option value="Business">Business</option>
                                    <option value="Professional">Professional</option>
                                    <option value="Housewife">Housewife</option>
                                    <option value="Retired">Retired</option>
                                    <option value="Student">Student</option>
                                    <option value="Others">Others</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="th_pleaseSelectStatus">Please select Status</label>
                                <select id="th_pleaseSelectStatus" name="th_pleaseSelectStatus">
                                    <option value="-None-">-None-</option>
                                    <option value="Politically Exposed Person (PEP)">Politically Exposed Person (PEP)</option>
                                    <option value="Related to Politically Exposed Person (RPEP)">Related to Politically Exposed Person (RPEP)</option>
                                    <option value="Not Applicable">Not Applicable</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="th_sourcesOfFunds">Sources of Funds</label>
                                <select id="th_sourcesOfFunds" name="th_sourcesOfFunds">
                                    <option value="-None-">-None-</option>
                                    <option value="Own & Family">Own & Family</option>
                                    <option value="Borrowed">Borrowed</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Contact Details - Third Holder -->
                    <div class="section-group">
                        <div class="section-title">Contact Details - Third Holder</div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="th_mobileNo">Mobile No.</label>
                                <input type="tel" id="th_mobileNo" name="th_mobileNo" pattern="[0-9]{10}">
                            </div>
                            <div class="form-group">
                                <label for="th_landlineNo">Landline No.</label>
                                <input type="tel" id="th_landlineNo" name="th_landlineNo">
                            </div>
                            <div class="form-group">
                                <label for="th_emailId">Email ID</label>
                                <input type="email" id="th_emailId" name="th_emailId">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 4: Investment -->
                <div class="form-step" data-step="4">
                    <h2 class="step-title">Investment</h2>

                    <div class="section-group">
                        <div class="section-title">INVESTMENT PROFILE AND OBJECTIVES OF THE CLIENT</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="riskTolerance">Risk Tolerance</label>
                                <select id="riskTolerance" name="riskTolerance">>
                                    <option value="-None-">-None-</option>
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="investmentExperience">Investment Experience in Equity Markets</label>
                                <select id="investmentExperience" name="investmentExperience">
                                    <option value="-None-">-None-</option>
                                    <option value="<3 years">&lt;3 years</option>
                                    <option value="3-5 years">3-5 years</option>
                                    <option value="5 years">5 years</option>
                                </select>
                            </div>
                        </div>

                        <!-- Add all Investment Profile fields -->
                    </div>

                    <div class="section-group">
                        <div class="section-title">Client Introduced by</div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="clientName">Client Name</label>
                                <input type="text" id="clientName" name="clientName">
                            </div>
                            <div class="form-group">
                                <label for="clientAddress">Address</label>
                                <textarea id="clientAddress" name="clientAddress"></textarea>
                            </div>
                        </div>
                    </div>

                    <!-- Applicant Declaration fields (moved here) -->
                    <div class="section-group">
                        <div class="section-title">APPLICANT DECLARATION</div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="photoFirstHolder">Photo of First Holder</label>
                                <input type="file" id="photoFirstHolder" name="photoFirstHolder" accept="image/*">
                            </div>
                            <div class="form-group">
                                <label for="firstHolderDate">First Holder Date</label>
                                <input type="date" id="firstHolderDate" name="firstHolderDate">
                            </div>
                            <div class="form-group">
                                <label for="firstHolderPlace">First Holder Place</label>
                                <input type="text" id="firstHolderPlace" name="firstHolderPlace">
                            </div>
                        </div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="photoThirdHolder">Photo of Third Holder</label>
                                <input type="file" id="photoThirdHolder" name="photoThirdHolder" accept="image/*">
                            </div>
                            <div class="form-group">
                                <label for="thirdHolderDate">Third Holder Date</label>
                                <input type="date" id="thirdHolderDate" name="thirdHolderDate">
                            </div>
                            <div class="form-group">
                                <label for="thirdHolderPlace">Third Holder Place</label>
                                <input type="text" id="thirdHolderPlace" name="thirdHolderPlace">
                            </div>
                        </div>
                        <div class="form-row-3">
                            <div class="form-group">
                                <label for="photoSecondHolder">Photo of Second Holder</label>
                                <input type="file" id="photoSecondHolder" name="photoSecondHolder" accept="image/*">
                            </div>
                            <div class="form-group">
                                <label for="secondHolderDate">Second Holder Date</label>
                                <input type="date" id="secondHolderDate" name="secondHolderDate">
                            </div>
                            <div class="form-group">
                                <label for="secondHolderPlace">Second Holder Place</label>
                                <input type="text" id="secondHolderPlace" name="secondHolderPlace">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Step 5: Review -->
                <!-- <div class="form-step" data-step="7">
                    <h2 class="step-title">Review & Submit</h2>

                    <div class="alert alert-warning">
                        <strong>Important:</strong> Once you submit this form, the record will be locked and can only be
                        modified through this widget by authorized personnel.
                    </div>

                    <div id="reviewContent">
                        <!-- Review content will be populated by JavaScript -->
<!--                     </div>
                </div> -->
            </form>
        </div>

        <div class="button-group">
            <div>
                <button type="button" id="prevBtn" class="btn btn-secondary" onclick="changeStep(-1)"
                    style="display: none;">Previous</button>
            </div>
            <div>
                <button type="button" id="saveDraftBtn" class="btn btn-outline" onclick="saveDraft()">Save as
                    Draft</button>
                <button type="button" id="nextBtn" class="btn btn-primary" onclick="changeStep(1)">Next</button>
                <button type="button" id="submitBtn" class="btn btn-success hidden"
                    onclick="submitForm()">Submit</button>
            </div>
        </div>
    </div>

    <!-- Updated Zoho SDK -->
    <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
    <script>
    
    // Widget Configuration
    const WIDGET_CONFIG = {
        currentStep: 1,
        totalSteps: 4,
        recordId: null, // Remove static value
        isEditMode: false,
        recordStatus: 'draft',
        currentRecordData: null,
        isZohoInitialized: false
    };

    // Field mapping between Zoho CRM fields and widget field IDs
    const FIELD_MAPPING = {
        // Basic Information fields
        'Name': 'nameOfApplicant',
        // Remove or comment out Owner mapping since it's causing issues
        // 'Owner': 'onboardingOwner', 
        'Email': 'email',
        'Secondary_Email': 'secondaryEmail',
        'Exchange_Rate': 'exchangeRate',
        'Currency': 'currency',
        'Email_Opt_Out': 'emailOptOut',
        'Investor_Distributor_Type': 'investorDistributorType',
        'Sales_Type': 'salesType',
        'Lead_Lookup': 'leadLookup',
        'Family_Lookup': 'familyLookup',
        'Investor_Lookup': 'investorLookup',
        'Onboarding_Status': 'onboardingStatus',
        'Opportunity': 'opportunity',

        // First Holder fields - Updated to match your API
        'Father_s_Spouse_s_name': 'fh_fatherSpouseName',
        'Mother_s_Name': 'fh_motherName',
        'FH_Date_of_Birth': 'fh_dateOfBirth',
        'Marital_Status': 'fh_maritalStatus',
        'Gender': 'fh_gender',
        'Citizenship': 'fh_citizenship',
        'FH_Type_of_Account': 'fh_typeOfAccount',
        'Residential_Status': 'fh_residentialStatus',
        'PAN': 'fh_pan',
        'GST_No': 'fh_gstNo',
        'UID_Aadhaar_No': 'fh_uidAadhaar',
        'CKYC_No': 'fh_ckyc',
        'TAN': 'fh_tan',
        'Net_worth_Not_older_than_1_year': 'fh_netWorth',
        'As_on_Date': 'fh_asOnDate',
        'Income_Range_per_annum': 'fh_incomeRange',
        'Occupation': 'fh_occupation',
        'Please_select_Status': 'fh_pleaseSelectStatus',
        'Sources_of_Funds': 'fh_sourcesOfFunds',
        'Nature_of_Business_Type_of_Company_Firm_Prof': 'fh_natureOfBusinessProfession',
        'Overall_Investment_Goals': 'fh_overallInvestmentGoals',
        'Type_of_Company_Firm': 'fh_typeOfCompanyFirm',
        'Mobile_No': 'fh_mobileNo',
        'Landline_No': 'fh_landlineNo',
        'Email_ID': 'fh_emailId',
        'Passport_Number': 'fh_passportNumber',
        'Passport_Expiry_Date': 'fh_passportExpiryDate',
        'PAN_Card': 'fh_panCard',
        'Place_of_Incorporation': 'fh_voterID',
        'UID_Aadhaar': 'fh_uidAadhaarProof',
        'Driving_License': 'fh_drivingLicense',
        'Driving_License_Expiry_Date': 'fh_drivingLicenseExpiryDate',
        'Voter_ID': 'preferredAssetClassOther',

        // Second Holder fields - Updated to match your API
        'Name_of_Applicant1': 'sh_nameOfApplicant',
        'Mother_s_Name1': 'sh_motherName',
        'Gender1': 'sh_gender',
        'Citizenship1': 'sh_citizenship',
        'PAN1': 'sh_pan',

        // Third Holder fields - Updated to match your API
        'Name_of_Applicant2': 'th_nameOfApplicant',
        'Mother_s_Name2': 'th_motherName',
        'Registered_Address_2': 'th_gender', // This seems to be mapped to gender in your API
        'TH_Citizenship': 'th_citizenship',
        'PAN2': 'th_pan',

        // Investment Profile fields
        'Risk_Tolerance': 'riskTolerance',
        'Investment_Experience_in_Equity_Markets': 'investmentExperience',
        'Client_Name': 'clientName',
        'Address': 'clientAddress',

        // Declaration fields
        'Photo_of_First_Holder': 'photoFirstHolder',
        'First_Holder_Date': 'firstHolderDate',
        'First_Holder_Place': 'firstHolderPlace',
        'Second_Holder_Date': 'secondHolderDate',
        'Second_Holder_Place': 'secondHolderPlace',
        'Third_Holder_Date': 'thirdHolderDate',
        'Third_Holder_Place': 'thirdHolderPlace'
    };

    // Wait for DOM and Zoho SDK initialization
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize progress bar and buttons immediately
        updateProgressBar();
        updateButtons();
        initializeZohoSDK();
    });

    // Initialize Zoho SDK properly
    function initializeZohoSDK() {
        console.log('Starting Zoho SDK initialization...');

        // Check if ZOHO object exists
        if (typeof ZOHO === 'undefined') {
            console.error('ZOHO SDK not loaded');
            initializeWidgetWithoutZoho();
            return;
        }

        // Set up PageLoad event handler FIRST
        ZOHO.embeddedApp.on("PageLoad", function (data) {
            console.log("Zoho PageLoad event received:", data);
            
            // Extract Entity ID from the PageLoad event
            if (data && data.EntityId) {
                let entityId;
                
                // Handle both array and single value cases
                if (Array.isArray(data.EntityId)) {
                    entityId = data.EntityId[0];
                } else {
                    entityId = data.EntityId;
                }
                
                // Validate the EntityId is a valid positive number
                if (entityId && !isNaN(Number(entityId)) && Number(entityId) > 0) {
                    WIDGET_CONFIG.recordId = entityId.toString();
                    console.log('Valid Record ID from PageLoad event:', entityId);
                } else {
                    console.log('Invalid EntityId from PageLoad event:', entityId);
                    WIDGET_CONFIG.recordId = null;
                }
            } else {
                console.log('No EntityId in PageLoad event data');
                WIDGET_CONFIG.recordId = null;
            }
            
            // Resize widget
            ZOHO.CRM.UI.Resize({ height: "1500", width: "3000" }).then(function (resizeData) {
                console.log('Widget resized:', resizeData);
            }).catch(function(error) {
                console.log('Resize error:', error);
            });
            
            WIDGET_CONFIG.isZohoInitialized = true;
            initializeWidget();
        });

        // Initialize the embedded app
        ZOHO.embeddedApp.init()
            .then(function (initData) {
                console.log("Zoho CRM API initialized successfully:", initData);
                WIDGET_CONFIG.isZohoInitialized = true;

                // Try to get record ID from init data as backup
                if (initData && initData.EntityId && !WIDGET_CONFIG.recordId) {
                    let entityId;
                    if (Array.isArray(initData.EntityId)) {
                        entityId = initData.EntityId[0];
                    } else {
                        entityId = initData.EntityId;
                    }
                    
                    if (entityId && !isNaN(Number(entityId)) && Number(entityId) > 0) {
                        WIDGET_CONFIG.recordId = entityId.toString();
                        console.log('Record ID from init data:', entityId);
                    }
                }

                // If PageLoad event hasn't fired within 2 seconds, initialize anyway
                setTimeout(() => {
                    if (!WIDGET_CONFIG.isZohoInitialized) {
                        console.log('PageLoad event timeout, initializing widget...');
                        initializeWidget();
                    }
                }, 2000);
            })
            .catch(function (error) {
                console.error("Error initializing Zoho CRM API:", error);
                initializeWidgetWithoutZoho();
            });
    }

    // Initialize widget without Zoho integration
    function initializeWidgetWithoutZoho() {
        console.log('Initializing widget without Zoho integration');
        showAlert('Widget loaded in standalone mode. Zoho integration unavailable.', 'warning');
        updateProgressBar();
        showLoading(false);
    }

    // Main widget initialization
    async function initializeWidget() {
        try {
            showLoading(true);
            console.log('Initializing widget...');
            console.log('Current record ID:', WIDGET_CONFIG.recordId);
            console.log('Zoho initialized:', WIDGET_CONFIG.isZohoInitialized);

            // FIRST: Always unlock form for new sessions
            unlockForm();
            console.log('Form unlocked during initialization');

            // Get record ID if not already available
            if (!WIDGET_CONFIG.recordId && WIDGET_CONFIG.isZohoInitialized) {
                console.log('No record ID yet, trying to get it...');
                const recordId = await getCurrentRecordId();
                if (recordId) {
                    WIDGET_CONFIG.recordId = recordId;
                    console.log('Got record ID:', recordId);
                }
            }

            if (WIDGET_CONFIG.recordId && WIDGET_CONFIG.isZohoInitialized) {
                WIDGET_CONFIG.isEditMode = true;
                console.log('Loading existing record with ID:', WIDGET_CONFIG.recordId);
                await loadExistingRecord(WIDGET_CONFIG.recordId);
            } else {
                console.log('No record ID found, starting with empty form');
                // For new records, ensure everything is properly set up
                updateStatusBadge('draft');
                WIDGET_CONFIG.recordStatus = 'draft';
                
                // Make sure form stays unlocked
                setTimeout(() => {
                    unlockForm();
                    updateButtons();
                    console.log('New record setup completed');
                }, 100);
                
                if (!WIDGET_CONFIG.isZohoInitialized) {
                    showAlert('Zoho integration not available. You can still use the form, but data won\'t be saved to CRM.', 'info');
                } else {
                    showAlert('Starting with a new record. Fill the form and save to create a new record.', 'info');
                }
            }

            updateProgressBar();
            updateButtons();
            showLoading(false);

        } catch (error) {
            console.error('Error initializing widget:', error);
            showAlert('Error loading data: ' + error.message, 'error');
            // Ensure form is unlocked even on error
            unlockForm();
            updateButtons();
            showLoading(false);
        }
    }

    // Load existing record with better error handling
    async function loadExistingRecord(recordId) {
        try {
            console.log('Loading record with ID:', recordId);

            if (!WIDGET_CONFIG.isZohoInitialized) {
                throw new Error('Zoho SDK not initialized');
            }

            // Fetch record from Zoho CRM
            const response = await ZOHO.CRM.API.getRecord({
                Entity: "Onboarding",
                RecordID: recordId
            });

            console.log('API Response:', response);

            if (response && response.data && response.data.length > 0) {
                const recordData = response.data[0];
                WIDGET_CONFIG.currentRecordData = recordData;

                // Populate form with existing data
                populateForm(recordData);

                // Update status badge
                const status = recordData.Onboarding_Status || 'Draft';
                updateStatusBadge(status.toLowerCase());
                WIDGET_CONFIG.recordStatus = status;

                // IMPORTANT: Check status and lock/unlock accordingly
                const finalStatuses = ['Submitted', 'Approved', 'Account Activated', 'Onbaording Completed'];
                
                if (finalStatuses.includes(status)) {
                    console.log('Record has final status, locking form:', status);
                    lockForm();
                } else {
                    console.log('Record has editable status, keeping form unlocked:', status);
                    unlockForm();
                }

                showAlert('Record data loaded successfully!', 'success');
            } else {
                // No record data found, treat as new record
                console.log('No existing record data found');
                unlockForm();
                updateStatusBadge('draft');
                WIDGET_CONFIG.recordStatus = 'draft';
                showAlert('No existing data found for this record. You can now fill the form.', 'info');
            }
        } catch (error) {
            console.error('Error loading record:', error);
            // Always unlock on error
            unlockForm();
            updateStatusBadge('draft');
            WIDGET_CONFIG.recordStatus = 'draft';

            // Provide specific error messages
            if (error.message && error.message.includes('INVALID_MODULE')) {
                showAlert('Error: Invalid module name "Onboarding". Please check your Zoho CRM module configuration.', 'error');
            } else if (error.message && error.message.includes('RECORD_NOT_FOUND')) {
                showAlert('Record not found. Starting with a new form.', 'warning');
            } else if (error.message && error.message.includes('Parentwindow reference not found')) {
                showAlert('Unable to connect to Zoho CRM. Please ensure the widget is running within Zoho CRM.', 'error');
            } else if (error.message && error.message.includes('not initialized')) {
                showAlert('Zoho integration not available. Running in offline mode.', 'warning');
            } else {
                showAlert('Error loading record: ' + (error.message || 'Unknown error'), 'error');
            }
        }
    }

    // Populate form with existing data
    function populateForm(recordData) {
        try {
            console.log('Populating form with data:', recordData);

            // Iterate through field mapping and populate form fields
            Object.keys(FIELD_MAPPING).forEach(crmField => {
                const widgetFieldId = FIELD_MAPPING[crmField];
                const fieldElement = document.getElementById(widgetFieldId);

                if (fieldElement && recordData[crmField] !== undefined && recordData[crmField] !== null) {
                    const fieldValue = recordData[crmField];

                    // Handle different field types
                    if (fieldElement.type === 'checkbox') {
                        fieldElement.checked = fieldValue === true || fieldValue === 'true' || fieldValue === 'Yes';
                    } else if (fieldElement.type === 'date') {
                        // Handle date fields - convert Zoho date format if needed
                        if (fieldValue) {
                            const dateValue = new Date(fieldValue);
                            if (!isNaN(dateValue.getTime())) {
                                fieldElement.value = dateValue.toISOString().split('T')[0];
                            }
                        }
                    } else if (fieldElement.tagName === 'SELECT') {
                        // Handle dropdown fields
                        const options = fieldElement.querySelectorAll('option');
                        for (let option of options) {
                            if (option.value === fieldValue) {
                                fieldElement.value = fieldValue;
                                break;
                            }
                        }
                    } else {
                        // Handle text, number, email, etc.
                        fieldElement.value = fieldValue;
                    }

                    console.log(`Populated field ${widgetFieldId} with value:`, fieldValue);
                }
            });

            // Set hidden fields
            document.getElementById('recordId').value = recordData.id || '';
            document.getElementById('recordStatus').value = recordData.Onboarding_Status || 'Draft';
            WIDGET_CONFIG.recordStatus = recordData.Onboarding_Status || 'Draft';

        } catch (error) {
            console.error('Error populating form:', error);
            showAlert('Error populating form fields: ' + error.message, 'error');
        }
    }

    // Save draft function
    async function saveDraft() {
        try {
            if (!WIDGET_CONFIG.isZohoInitialized) {
                showAlert('Cannot save: Zoho integration not available. Please check your connection.', 'error');
                return;
            }

            showLoading(true);
            const formData = collectFormData();

            // Convert form data -> CRM API field names
            let crmData = convertToCRMFormat(formData);
            crmData.Onboarding_Status = 'Draft';

            // Get valid Owner ID - this is critical for fixing the error
            const ownerId = await getValidOwnerId();
            if (ownerId) {
                crmData.Owner = ownerId;
                console.log('Set Owner ID to:', ownerId);
            } else {
                // If we can't get a valid owner ID, DON'T include the Owner field at all
                delete crmData.Owner;
                console.log('No valid Owner ID available, removing Owner field');
            }

            // fallback name logic
            if (!crmData.Last_Name && !crmData.Name) {
                const fallbackName = formData.nameOfApplicant || 'Draft Entry';
                crmData.Last_Name = fallbackName;
                if (!crmData.First_Name) crmData.First_Name = fallbackName.split(' ')[0] || fallbackName;
            }

            // Ensure other fields are properly normalized
            Object.keys(crmData).forEach(key => {
                if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                    delete crmData[key]; // Remove empty fields
                }
            });

            // Handle boolean fields
            if (crmData.Email_Opt_Out !== undefined) {
                const v = String(crmData.Email_Opt_Out).toLowerCase();
                crmData.Email_Opt_Out = (v === 'true' || v === '1' || v === 'yes' || v === 'y' || v === 'on');
            }

            console.log('Prepared CRM payload (before insert/update):', crmData);
            console.log('Current record ID:', WIDGET_CONFIG.recordId);

            let response;
            
            // Check if we have a valid record ID for updating
            const hasValidRecordId = WIDGET_CONFIG.recordId && 
                                    WIDGET_CONFIG.recordId !== '' && 
                                    WIDGET_CONFIG.recordId !== null && 
                                    WIDGET_CONFIG.recordId !== 'null' &&
                                    WIDGET_CONFIG.recordId !== 'undefined' &&
                                    !isNaN(Number(WIDGET_CONFIG.recordId));

            if (hasValidRecordId) {
                // Update existing record
                console.log('Updating existing record with ID:', WIDGET_CONFIG.recordId);
                
                // For updates, include the id in the data payload
                const updateData = {
                    ...crmData,
                    id: WIDGET_CONFIG.recordId.toString()
                };
                
                response = await ZOHO.CRM.API.updateRecord({
                    Entity: "Onboarding",
                    APIData: [updateData]
                });
            } else {
                // Create new record
                console.log('Creating new record...');
                response = await ZOHO.CRM.API.insertRecord({
                    Entity: "Onboarding",
                    APIData: [crmData]
                });
            }

            console.log('Save response:', response);

            if (response && response.data && response.data.length > 0) {
                const result = response.data[0];
                if (result.code === 'SUCCESS') {
                    const newId = result.details && (result.details.id || result.details.ID);
                    if (newId) {
                        WIDGET_CONFIG.recordId = newId.toString();
                        document.getElementById('recordId').value = newId.toString();
                        console.log('Record saved with ID:', newId);
                    }
                    showAlert('Draft saved successfully!', 'success');
                    updateStatusBadge('draft');
                } else {
                    const errMsg = result.message || JSON.stringify(result);
                    throw new Error('Zoho Save failed: ' + errMsg);
                }
            } else {
                throw new Error('No response or unexpected response format from Zoho API');
            }
        } catch (error) {
            console.error('Error saving draft:', error);
            
            // Enhanced error handling specifically for Owner field issues
            if (error.data && error.data[0]) {
                const errorData = error.data[0];
                if (errorData.code === 'INVALID_DATA' && errorData.details && errorData.details.api_name === 'Owner') {
                    // Try again without the Owner field as a fallback
                    console.log('Owner field caused an error, trying again without it...');
                    
                    // Set a flag to avoid infinite recursion
                    if (!window._retryWithoutOwner) {
                        window._retryWithoutOwner = true;
                        
                        // Get the form data again and retry
                        const formData = collectFormData();
                        let crmData = convertToCRMFormat(formData);
                        
                        // Remove the Owner field entirely
                        delete crmData.Owner;
                        
                        // Try saving again
                        try {
                            let response;
                            const hasValidRecordId = WIDGET_CONFIG.recordId && !isNaN(Number(WIDGET_CONFIG.recordId));
                            
                            if (hasValidRecordId) {
                                const updateData = {
                                    ...crmData,
                                    id: WIDGET_CONFIG.recordId.toString(),
                                    Onboarding_Status: 'Draft'
                            };
                            
                            response = await ZOHO.CRM.API.updateRecord({
                                Entity: "Onboarding",
                                APIData: [updateData]
                            });
                            } else {
                                crmData.Onboarding_Status = 'Draft';
                                response = await ZOHO.CRM.API.insertRecord({
                                    Entity: "Onboarding",
                                    APIData: [crmData]
                                });
                            }
                            
                            if (response && response.data && response.data.length > 0 && response.data[0].code === 'SUCCESS') {
                                const newId = response.data[0].details && response.data[0].details.id;
                                if (newId) WIDGET_CONFIG.recordId = newId.toString();
                                showAlert('Draft saved successfully! (without Owner field)', 'success');
                                updateStatusBadge('draft');
                            } else {
                                showAlert('Error saving draft: Unknown error in retry', 'error');
                            }
                        } catch (retryError) {
                            showAlert('Error in retry: ' + (retryError.message || 'Unknown error'), 'error');
                        } finally {
                            window._retryWithoutOwner = false;
                        }
                } else {
                    showAlert('Error: Could not save with or without Owner field. Please contact administrator.', 'error');
                }
            } else if (errorData.code === 'INVALID_DATA') {
                showAlert('Error: Invalid data format for field: ' + (errorData.details ? errorData.details.api_name : 'unknown'), 'error');
            } else {
                showAlert('Error: ' + (errorData.message || JSON.stringify(errorData)), 'error');
            }
        } else {
            showAlert('Error saving draft: ' + (error.message || 'Unknown error'), 'error');
        }
    } finally {
        showLoading(false);
    }
}

    // Submit form function
    async function submitForm() {
        try {
            if (!WIDGET_CONFIG.isZohoInitialized) {
                showAlert('Cannot submit: Zoho integration not available. Please check your connection.', 'error');
                return;
            }

            if (!validateAllSteps()) {
                showAlert('Please complete all required fields before submitting.', 'error');
                return;
            }

            showLoading(true);
            const formData = collectFormData();

            // Prepare data for Zoho CRM
            let crmData = convertToCRMFormat(formData);
            crmData.Onboarding_Status = 'Submitted';

            // Get valid Owner ID - this is critical for fixing the error
            const ownerId = await getValidOwnerId();
            if (ownerId) {
                crmData.Owner = ownerId;
                console.log('Set Owner ID to:', ownerId);
            } else {
                // If we can't get a valid owner ID, DON'T include the Owner field at all
                delete crmData.Owner;
                console.log('No valid Owner ID available, removing Owner field');
            }

            // Clean up any null, undefined, or empty string values
            Object.keys(crmData).forEach(key => {
                if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                    delete crmData[key];
                }
            });

            console.log('Prepared CRM payload for submit:', crmData);
            console.log('Current record ID:', WIDGET_CONFIG.recordId);
        
            let response;
            
            // Check if we have a valid record ID for updating
            const hasValidRecordId = WIDGET_CONFIG.recordId && 
                                    WIDGET_CONFIG.recordId !== '' && 
                                    WIDGET_CONFIG.recordId !== null && 
                                    WIDGET_CONFIG.recordId !== 'null' &&
                                    WIDGET_CONFIG.recordId !== 'undefined' &&
                                    !isNaN(Number(WIDGET_CONFIG.recordId));

            if (hasValidRecordId) {
                // Update existing record
                console.log('Submitting existing record with ID:', WIDGET_CONFIG.recordId);
                
                // For updates, include the id in the data payload
                const updateData = {
                    ...crmData,
                    id: WIDGET_CONFIG.recordId.toString()
                };
                
                response = await ZOHO.CRM.API.updateRecord({
                    Entity: "Onboarding",
                    APIData: [updateData]
                });
            } else {
                // Create new record
                console.log('Creating and submitting new record...');
                response = await ZOHO.CRM.API.insertRecord({
                    Entity: "Onboarding",
                    APIData: [crmData]
                });
            }

            console.log('Submit response:', response);

            if (response && response.data && response.data.length > 0) {
                const result = response.data[0];
                if (result.code === 'SUCCESS') {
                    WIDGET_CONFIG.recordStatus = 'Submitted';
                    document.getElementById('recordStatus').value = 'Submitted';
                    const newId = result.details && (result.details.id || result.details.ID);
                    if (newId) {
                        WIDGET_CONFIG.recordId = newId.toString();
                        document.getElementById('recordId').value = newId.toString();
                        console.log('Record submitted with ID:', newId);
                    }
                    updateStatusBadge('submitted');
                    lockForm();
                    showAlert('Form submitted successfully! Your onboarding record has been locked for editing.', 'success');
                } else {
                    throw new Error(result.message || JSON.stringify(result));
                }
            } else {
                throw new Error('No response or unexpected response format from Zoho API');
            }
        } catch (error) {
            console.error('Error submitting form:', error);
            
            // Enhanced error handling
            if (error.data && error.data[0]) {
                const errorData = error.data[0];
                if (errorData.code === 'INVALID_DATA' && errorData.details && errorData.details.api_name === 'Owner') {
                    // Try again without the Owner field as a fallback
                    console.log('Owner field caused an error, trying again without it...');
                    
                    // Set a flag to avoid infinite recursion
                    if (!window._retryWithoutOwner) {
                        window._retryWithoutOwner = true;
                        
                        // Get the form data again and retry
                        const formData = collectFormData();
                        let crmData = convertToCRMFormat(formData);
                        
                        // Remove the Owner field entirely
                        delete crmData.Owner;
                        crmData.Onboarding_Status = 'Submitted';
                        
                        // Try submitting again
                        try {
                            let response;
                            const hasValidRecordId = WIDGET_CONFIG.recordId && !isNaN(Number(WIDGET_CONFIG.recordId));
                            
                            if (hasValidRecordId) {
                                const updateData = {
                                    ...crmData,
                                    id: WIDGET_CONFIG.recordId.toString(),
                            };
                            
                            response = await ZOHO.CRM.API.updateRecord({
                                Entity: "Onboarding",
                                APIData: [updateData]
                            });
                            } else {
                                response = await ZOHO.CRM.API.insertRecord({
                                    Entity: "Onboarding",
                                    APIData: [crmData]
                            });
                            }
                            
                            if (response && response.data && response.data.length > 0 && response.data[0].code === 'SUCCESS') {
                                const newId = response.data[0].details && response.data[0].details.id;
                                if (newId) WIDGET_CONFIG.recordId = newId.toString();
                                updateStatusBadge('submitted');
                                lockForm();
                                showAlert('Form submitted successfully! (without Owner field)', 'success');
                            } else {
                                showAlert('Error submitting form: Unknown error in retry', 'error');
                            }
                        } catch (retryError) {
                            showAlert('Error in retry: ' + (retryError.message || 'Unknown error'), 'error');
                        } finally {
                            window._retryWithoutOwner = false;
                        }
                    } else {
                        showAlert('Error: Could not submit with or without Owner field. Please contact administrator.', 'error');
                    }
                } else if (errorData.code === 'INVALID_DATA') {
                } else {
                    showAlert('Error: ' + (errorData.message || JSON.stringify(errorData)), 'error');
                }
            } else {
                showAlert('Error submitting form: ' + (error.message || 'Unknown error'), 'error');
            }
        } finally {
            showLoading(false);
        }
    }

    // Enhanced normalizeCRMData function to properly handle Owner field
    async function normalizeCRMData(crmData) {
        delete crmData.recordId;

        // Handle Owner field properly
        try {
            console.log('Processing Owner field:', crmData.Owner);
            
            if (crmData.Owner !== undefined && crmData.Owner !== null && crmData.Owner !== '') {
                // If it's already a valid number (user ID), keep it
                if (!isNaN(Number(crmData.Owner)) && Number(crmData.Owner) > 0) {
                    crmData.Owner = Number(crmData.Owner);
                    console.log('Owner field set to valid user ID:', crmData.Owner);
                } else {
                    // If it's a string (like a name), try to resolve it or remove it
                    console.log('Owner field contains invalid data, trying to get current user...');
                    if (typeof ZOHO !== 'undefined') {
                        const userInfo = await ZOHO.CRM.CONFIG.getCurrentUser();
                        if (userInfo && userInfo.users && userInfo.users[0] && userInfo.users[0].id) {
                            crmData.Owner = Number(userInfo.users[0].id);
                            console.log('Owner field set to current user ID:', crmData.Owner);
                        } else {
                            console.log('Could not get current user, removing Owner field');
                            delete crmData.Owner;
                        }
                    } else {
                        console.log('ZOHO not available, removing Owner field');
                        delete crmData.Owner;
                    }
                }
            } else {
                // No Owner provided, try to set current user as owner
                console.log('No Owner provided, trying to get current user...');
                if (typeof ZOHO !== 'undefined') {
                    const userInfo = await ZOHO.CRM.CONFIG.getCurrentUser().catch(() => null);
                    if (userInfo && userInfo.users && userInfo.users[0] && userInfo.users[0].id) {
                        crmData.Owner = Number(userInfo.users[0].id);
                        console.log('Owner field set to current user ID (default):', crmData.Owner);
                    } else {
                        console.log('Could not get current user, Owner field will be empty');
                        // Don't set Owner field at all if we can't get current user
                        delete crmData.Owner;
                    }
                } else {
                    console.log('ZOHO not available, removing Owner field');
                    delete crmData.Owner;
                }
            }
        } catch (e) {
            console.error('Error processing Owner field:', e);
            // If anything fails with Owner field, remove it completely
            delete crmData.Owner;
        }

        // Handle Email_Opt_Out boolean field
        if (crmData.Email_Opt_Out !== undefined) {
            const v = String(crmData.Email_Opt_Out).toLowerCase();
            crmData.Email_Opt_Out = (v === 'true' || v === '1' || v === 'yes' || v === 'y');
        }

        // Clean up any null, undefined, or empty string values
        Object.keys(crmData).forEach(key => {
            if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                delete crmData[key];
            }
        });

        console.log('Normalized CRM data (final):', crmData);
        return crmData;
    }

    // Keep all existing utility functions
    function updateStatusBadge(status) {
        const statusContainer = document.getElementById('statusContainer');
        const statusBadge = document.getElementById('statusBadge');

        statusContainer.classList.remove('hidden');
        statusBadge.className = `status-badge status-${status}`;

        switch (status.toLowerCase()) {
            case 'draft':
            case 'in progress':
                statusBadge.className = 'status-badge status-draft';
                statusBadge.textContent = 'Draft - In Progress';
                break;
            case 'submitted':
            case 'under review':
                statusBadge.className = 'status-badge status-submitted';
                statusBadge.textContent = 'Submitted - Under Review';
                break;
            case 'approved':
            case 'locked':
                statusBadge.className = 'status-badge status-locked';
                statusBadge.textContent = 'Approved - Locked for Editing';
                break;
            case 'rejected':
                statusBadge.className = 'status-badge status-error';
                statusBadge.textContent = 'Rejected - Requires Revision';
                break;
            default:
                statusBadge.className = 'status-badge status-draft';
                statusBadge.textContent = 'Draft - In Progress';
        }
    }

    function lockForm() {
        console.log('=== LOCKING FORM ===');
    
        const inputs = document.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (input.id !== 'recordId' && input.id !== 'recordStatus') {
                input.disabled = true;
                input.style.backgroundColor = '#f8f9fa';
                input.style.cursor = 'not-allowed';
            }
        });

        // Hide action buttons
        const saveDraftBtn = document.getElementById('saveDraftBtn');
        const submitBtn = document.getElementById('submitBtn');
        const nextBtn = document.getElementById('nextBtn');
        
        if (saveDraftBtn) {
            saveDraftBtn.style.display = 'none';
            saveDraftBtn.classList.add('hidden');
        }
        
        if (submitBtn) {
            submitBtn.style.display = 'none';
            submitBtn.classList.add('hidden');
        }

        if (nextBtn && WIDGET_CONFIG.currentStep < WIDGET_CONFIG.totalSteps) {
            nextBtn.textContent = 'Next (View Only)';
            nextBtn.style.display = 'inline-block';
            nextBtn.classList.remove('hidden');
        }

        console.log('=== FORM LOCK COMPLETE ===');
        showAlert('This record has been submitted/approved and is locked for editing.', 'warning');
    }

    function unlockForm() {
        console.log('=== UNLOCKING FORM ===');
        
        // Enable all form inputs
        const inputs = document.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (input.id !== 'recordId' && input.id !== 'recordStatus') {
                input.disabled = false;
                input.style.backgroundColor = '';
                input.style.cursor = '';
            }
        });
        console.log('Form inputs enabled');

        // Force show the buttons with multiple methods
        const saveDraftBtn = document.getElementById('saveDraftBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');
        
        if (saveDraftBtn) {
            saveDraftBtn.style.display = 'inline-block';
            saveDraftBtn.style.visibility = 'visible';
            saveDraftBtn.classList.remove('hidden');
            saveDraftBtn.removeAttribute('hidden');
            console.log('Save Draft button forced visible');
        }
        
        if (nextBtn) {
            nextBtn.style.display = 'inline-block';
            nextBtn.style.visibility = 'visible';
            nextBtn.classList.remove('hidden');
            nextBtn.removeAttribute('hidden');
            nextBtn.textContent = 'Next';
            console.log('Next button forced visible');
        }
        
        // Hide submit button on non-final steps
        if (submitBtn && WIDGET_CONFIG.currentStep < WIDGET_CONFIG.totalSteps) {
            submitBtn.style.display = 'none';
            submitBtn.classList.add('hidden');
        }
        
        console.log('=== FORM UNLOCK COMPLETE ===');
        
        // Double-check after a short delay
        setTimeout(() => {
            console.log('Post-unlock check:');
            console.log('Save Draft visible?', saveDraftBtn ? saveDraftBtn.style.display : 'not found');
            console.log('Next visible?', nextBtn ? nextBtn.style.display : 'not found');
            console.log('Any disabled inputs?', document.querySelectorAll('input:disabled, select:disabled, textarea:disabled').length);
        }, 50);
    }

    function changeStep(direction) {
        const isLocked = document.querySelector('input:disabled') !== null;

        if (direction === 1 && !isLocked && !validateCurrentStep()) {
            return;
        }

        const newStep = WIDGET_CONFIG.currentStep + direction;

        if (newStep < 1 || newStep > WIDGET_CONFIG.totalSteps) {
            return;
        }

        document.querySelector(`.form-step[data-step="${WIDGET_CONFIG.currentStep}"]`).classList.remove('active');
        document.querySelector(`.step-indicator[data-step="${WIDGET_CONFIG.currentStep}"]`).classList.remove('active');

        if (direction === 1) {
            document.querySelector(`.step-indicator[data-step="${WIDGET_CONFIG.currentStep}"]`).classList.add('completed');
        }

        WIDGET_CONFIG.currentStep = newStep;
        document.querySelector(`.form-step[data-step="${WIDGET_CONFIG.currentStep}"]`).classList.add('active');
        document.querySelector(`.step-indicator[data-step="${WIDGET_CONFIG.currentStep}"]`).classList.add('active');

        updateButtons();
        updateProgressBar();
    }

    function validateCurrentStep() {
        const currentStepElement = document.querySelector(`.form-step[data-step="${WIDGET_CONFIG.currentStep}"]`);
        const requiredFields = currentStepElement.querySelectorAll('[required]');

        let isValid = true;
        requiredFields.forEach(field => {
            if (!field.value.trim()) {
                field.style.borderColor = '#dc3545';
                isValid = false;
            } else {
                field.style.borderColor = '#d1d3e2';
            }
        });

        if (!isValid) {
            showAlert('Please fill in all required fields before proceeding.', 'error');
        }

        return isValid;
    }

    function updateButtons() {
        console.log('=== UPDATING BUTTONS ===');
        console.log('Current step:', WIDGET_CONFIG.currentStep);
        console.log('Total steps:', WIDGET_CONFIG.totalSteps);
        
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const submitBtn = document.getElementById('submitBtn');
        const saveDraftBtn = document.getElementById('saveDraftBtn');

        // Show/hide previous button
        if (prevBtn) {
            prevBtn.style.display = WIDGET_CONFIG.currentStep === 1 ? 'none' : 'inline-block';
        }

        // Check if form is ACTUALLY locked by checking disabled inputs
        const disabledInputs = document.querySelectorAll('input:disabled, select:disabled, textarea:disabled');
        const isLocked = disabledInputs.length > 2; // More than just recordId and recordStatus
    
        console.log('Form locked check:', isLocked);
        console.log('Disabled inputs count:', disabledInputs.length);
        console.log('Record status:', WIDGET_CONFIG.recordStatus);
    
        if (!isLocked) {
            console.log('Form is NOT locked - showing buttons');
            
            // FORCE show save draft button
            if (saveDraftBtn) {
                saveDraftBtn.style.display = 'inline-block';
                saveDraftBtn.style.visibility = 'visible';
                saveDraftBtn.classList.remove('hidden');
                saveDraftBtn.removeAttribute('hidden');
                console.log('Save Draft button FORCED visible');
            }
            
            if (WIDGET_CONFIG.currentStep === WIDGET_CONFIG.totalSteps) {
                // Final step - show submit, hide next
                if (nextBtn) {
                    nextBtn.style.display = 'none';
                    nextBtn.classList.add('hidden');
                }
                if (submitBtn) {
                    submitBtn.style.display = 'inline-block';
                    submitBtn.classList.remove('hidden');
                }
                console.log('Final step - submit button shown');
            } else {
                // Not final step - show next, hide submit
                if (nextBtn) {
                    nextBtn.style.display = 'inline-block';
                    nextBtn.style.visibility = 'visible';
                    nextBtn.classList.remove('hidden');
                    nextBtn.removeAttribute('hidden');
                    nextBtn.textContent = 'Next';
                    console.log('Next button FORCED visible');
                }
                if (submitBtn) {
                    submitBtn.style.display = 'none';
                    submitBtn.classList.add('hidden');
                }
                console.log('Non-final step - next button shown');
            }
        } else {
            console.log('Form IS locked - hiding action buttons');
            // Form is locked - hide save and submit buttons
            if (saveDraftBtn) {
                saveDraftBtn.style.display = 'none';
                saveDraftBtn.classList.add('hidden');
            }
            if (submitBtn) {
                submitBtn.style.display = 'none';
                submitBtn.classList.add('hidden');
            }
            if (nextBtn && WIDGET_CONFIG.currentStep < WIDGET_CONFIG.totalSteps) {
                nextBtn.textContent = 'Next (View Only)';
                nextBtn.style.display = 'inline-block';
                nextBtn.classList.remove('hidden');
            }
        }
        
        console.log('=== BUTTON UPDATE COMPLETE ===');
        
        // Log final button states
        setTimeout(() => {
            console.log('Final button states:');
            console.log('Save Draft:', saveDraftBtn ? saveDraftBtn.style.display : 'not found');
            console.log('Next:', nextBtn ? nextBtn.style.display : 'not found');
            console.log('Submit:', submitBtn ? submitBtn.style.display : 'not found');
        }, 10);
    }

    function updateProgressBar() {
        const progress = (WIDGET_CONFIG.currentStep / WIDGET_CONFIG.totalSteps) * 100;
        document.getElementById('progressFill').style.width = `${progress}%`;
    }

    function convertToCRMFormat(formData) {
        const crmData = {};
        const booleanFields = ['Email_Opt_Out'];

        Object.keys(formData).forEach(widgetField => {
            const crmField = Object.keys(FIELD_MAPPING).find(key =>
                FIELD_MAPPING[key] === widgetField
            );

            if (crmField) {
                let value = formData[widgetField];

                if (booleanFields.includes(crmField)) {
                    if (value === undefined || value === null || value === '') {
                        value = false;
                    } else {
                        const v = String(value).toLowerCase();
                        value = (v === 'true' || v === '1' || v === 'yes' || v === 'y');
                    }
                }

                crmData[crmField] = value;
            }
        });

        // Handle Owner field separately - don't map it from form data
        // Instead, we'll set it in normalizeCRMData function using current user
        console.log('Form data converted to CRM format (before Owner processing):', crmData);

        return crmData;
    }

    function collectFormData() {
        const formData = new FormData(document.getElementById('onboardingForm'));
        const data = {};

        for (let [key, value] of formData.entries()) {
            data[key] = value;
        }

        if (WIDGET_CONFIG.recordId) {
            data.recordId = WIDGET_CONFIG.recordId;
        }

        return data;
    }

    function validateAllSteps() {
        for (let step = 1; step <= WIDGET_CONFIG.totalSteps - 1; step++) {
            const stepElement = document.querySelector(`.form-step[data-step="${step}"]`);
            const requiredFields = stepElement.querySelectorAll('[required]');

            for (let field of requiredFields) {
                if (!field.value.trim()) {
                    return false;
                }
            }
        }
        return true;
    }

    function showLoading(show) {
        const loadingScreen = document.getElementById('loadingScreen');
        const formSteps = document.querySelectorAll('.form-step');

        if (show) {
            loadingScreen.classList.remove('hidden');
            formSteps.forEach(step => step.style.display = 'none');
        } else {
            loadingScreen.classList.add('hidden');
            formSteps.forEach(step => step.style.display = '');
            document.querySelector('.form-step.active').style.display = 'block';
        }
    }

    function showAlert(message, type = 'info') {
        const existingAlerts = document.querySelectorAll('.alert');
        existingAlerts.forEach(alert => alert.remove());

        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.innerHTML = message;

        const formContainer = document.querySelector('.form-container');
        formContainer.insertBefore(alert, formContainer.firstChild);

        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 5000);
    }

    // Add this improved function to set the Owner field correctly
async function getValidOwnerId() {
    try {
        // Try to get current user
        const userInfo = await ZOHO.CRM.CONFIG.getCurrentUser();
        
        // Check if we got valid user info
        if (userInfo && userInfo.users && userInfo.users.length > 0 && userInfo.users[0].id) {
            console.log('Found valid user ID:', userInfo.users[0].id);
            return Number(userInfo.users[0].id);
        }
        
        // If getCurrentUser fails, try alternative method
        const orgInfo = await ZOHO.CRM.CONFIG.getOrgInfo();
        if (orgInfo && orgInfo.org && orgInfo.org[0] && orgInfo.org[0].user_id) {
            console.log('Found org user ID:', orgInfo.org[0].user_id);
            return Number(orgInfo.org[0].user_id);
        }
        
        console.log('Could not retrieve any valid user ID');
        return null;
    } catch (error) {
        console.error('Error getting valid owner ID:', error);
        return null;
    }
}

// Replace your saveDraft function with this improved version
async function saveDraft() {
    try {
        if (!WIDGET_CONFIG.isZohoInitialized) {
            showAlert('Cannot save: Zoho integration not available. Please check your connection.', 'error');
            return;
        }

        showLoading(true);
        const formData = collectFormData();

        // Convert form data -> CRM API field names
        let crmData = convertToCRMFormat(formData);
        crmData.Onboarding_Status = 'Draft';

        // Get valid Owner ID - this is critical for fixing the error
        const ownerId = await getValidOwnerId();
        if (ownerId) {
            crmData.Owner = ownerId;
            console.log('Set Owner ID to:', ownerId);
        } else {
            // If we can't get a valid owner ID, DON'T include the Owner field at all
            delete crmData.Owner;
            console.log('No valid Owner ID available, removing Owner field');
        }

        // fallback name logic
        if (!crmData.Last_Name && !crmData.Name) {
            const fallbackName = formData.nameOfApplicant || 'Draft Entry';
            crmData.Last_Name = fallbackName;
            if (!crmData.First_Name) crmData.First_Name = fallbackName.split(' ')[0] || fallbackName;
        }

        // Ensure other fields are properly normalized
        Object.keys(crmData).forEach(key => {
            if (crmData[key] === null || crmData[key] === undefined || crmData[key] === '') {
                delete crmData[key]; // Remove empty fields
            }
        });

        // Handle boolean fields
        if (crmData.Email_Opt_Out !== undefined) {
            const v = String(crmData.Email_Opt_Out).toLowerCase();
            crmData.Email_Opt_Out = (v === 'true' || v === '1' || v === 'yes' || v === 'y' || v === 'on');
        }

        console.log('Prepared CRM payload (before insert/update):', crmData);
        console.log('Current record ID:', WIDGET_CONFIG.recordId);

        let response;
        
        // Check if we have a valid record ID for updating
        const hasValidRecordId = WIDGET_CONFIG.recordId && 
                                WIDGET_CONFIG.recordId !== '' && 
                                WIDGET_CONFIG.recordId !== null && 
                                WIDGET_CONFIG.recordId !== 'null' &&
                                WIDGET_CONFIG.recordId !== 'undefined' &&
                                !isNaN(Number(WIDGET_CONFIG.recordId));

        if (hasValidRecordId) {
            // Update existing record
            console.log('Updating existing record with ID:', WIDGET_CONFIG.recordId);
            
            // For updates, include the id in the data payload
            const updateData = {
                ...crmData,
                id: WIDGET_CONFIG.recordId.toString()
            };
            
            response = await ZOHO.CRM.API.updateRecord({
                Entity: "Onboarding",
                APIData: [updateData]
            });
        } else {
            // Create new record
            console.log('Creating new record...');
            response = await ZOHO.CRM.API.insertRecord({
                Entity: "Onboarding",
                APIData: [crmData]
            });
        }

        console.log('Save response:', response);

        if (response && response.data && response.data.length > 0) {
            const result = response.data[0];
            if (result.code === 'SUCCESS') {
                const newId = result.details && (result.details.id || result.details.ID);
                if (newId) {
                    WIDGET_CONFIG.recordId = newId.toString();
                    document.getElementById('recordId').value = newId.toString();
                    console.log('Record saved with ID:', newId);
                }
                showAlert('Draft saved successfully!', 'success');
                updateStatusBadge('draft');
            } else {
                const errMsg = result.message || JSON.stringify(result);
                throw new Error('Zoho Save failed: ' + errMsg);
            }
        } else {
            throw new Error('No response or unexpected response format from Zoho API');
        }
    } catch (error) {
        console.error('Error saving draft:', error);
        
        // Enhanced error handling specifically for Owner field issues
        if (error.data && error.data[0]) {
            const errorData = error.data[0];
            if (errorData.code === 'INVALID_DATA' && errorData.details && errorData.details.api_name === 'Owner') {
                // Try again without the Owner field as a fallback
                console.log('Owner field caused an error, trying again without it...');
                
                // Set a flag to avoid infinite recursion
                if (!window._retryWithoutOwner) {
                    window._retryWithoutOwner = true;
                    
                    // Get the form data again and retry
                    const formData = collectFormData();
                    let crmData = convertToCRMFormat(formData);
                    
                    // Remove the Owner field entirely
                    delete crmData.Owner;
                    
                    // Try saving again
                    try {
                        let response;
                        const hasValidRecordId = WIDGET_CONFIG.recordId && !isNaN(Number(WIDGET_CONFIG.recordId));
                        
                        if (hasValidRecordId) {
                            const updateData = {
                                ...crmData,
                                id: WIDGET_CONFIG.recordId.toString(),
                                Onboarding_Status: 'Draft'
                            };
                            
                            response = await ZOHO.CRM.API.updateRecord({
                                Entity: "Onboarding",
                                APIData: [updateData]
                            });
                        } else {
                            crmData.Onboarding_Status = 'Draft';
                            response = await ZOHO.CRM.API.insertRecord({
                                Entity: "Onboarding",
                                APIData: [crmData]
                            });
                        }
                        
                        if (response && response.data && response.data.length > 0 && response.data[0].code === 'SUCCESS') {
                            const newId = response.data[0].details && response.data[0].details.id;
                            if (newId) WIDGET_CONFIG.recordId = newId.toString();
                            showAlert('Draft saved successfully! (without Owner field)', 'success');
                            updateStatusBadge('draft');
                        } else {
                            showAlert('Error saving draft: Unknown error in retry', 'error');
                        }
                    } catch (retryError) {
                        showAlert('Error in retry: ' + (retryError.message || 'Unknown error'), 'error');
                    } finally {
                        window._retryWithoutOwner = false;
                    }
                } else {
                    showAlert('Error: Could not save with or without Owner field. Please contact administrator.', 'error');
                }
            } else if (errorData.code === 'INVALID_DATA') {
                showAlert('Error: Invalid data format for field: ' + (errorData.details ? errorData.details.api_name : 'unknown'), 'error');
            } else {
                showAlert('Error: ' + (errorData.message || JSON.stringify(errorData)), 'error');
            }
        } else {
            showAlert('Error saving draft: ' + (error.message || 'Unknown error'), 'error');
        }
    } finally {
        showLoading(false);
    }
}
</script>
</body>

</html>